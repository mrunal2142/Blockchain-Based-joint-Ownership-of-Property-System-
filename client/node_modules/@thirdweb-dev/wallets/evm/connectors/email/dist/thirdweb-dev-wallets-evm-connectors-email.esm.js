import { _ as _defineProperty } from '../../../../dist/defineProperty-e24c82ea.esm.js';
import { T as TWConnector } from '../../../../dist/tw-connector-e44dbd6f.esm.js';
import { PaperEmbeddedWalletSdk, UserStatus } from '@paperxyz/embedded-wallet-service-sdk';
import 'eventemitter3';

const PaperChainMap = {
  1: "Ethereum",
  5: "Goerli",
  137: "Polygon",
  80001: "Mumbai"
};
class EmailWalletConnector extends TWConnector {
  constructor(options) {
    super();
    _defineProperty(this, "id", "email-wallet");
    _defineProperty(this, "name", "Email Wallet");
    _defineProperty(this, "ready", true);
    _defineProperty(this, "user", null);
    _defineProperty(this, "paper", void 0);
    this.paper = new PaperEmbeddedWalletSdk({
      clientId: options.clientId,
      chain: options.chain
    });
  }

  // TODO define our own connector interface
  async connect(args) {
    const email = args?.email;
    if (!email) {
      throw new Error("No Email provided");
    }
    let getUser = await this.paper.getUser();
    switch (getUser.status) {
      case UserStatus.LOGGED_OUT:
        {
          const authResult = await this.paper.auth.loginWithPaperEmailOtp({
            email
          });
          this.user = authResult.user;
          break;
        }
      case UserStatus.LOGGED_IN_WALLET_INITIALIZED:
        {
          this.user = getUser;
          break;
        }
    }
    if (!this.user) {
      throw new Error("Error connecting User");
    }
    return this.getAddress();
  }
  async disconnect() {
    this.user = null;
  }
  async getAddress() {
    return await this.getUser().wallet.getAddress();
  }
  async isConnected() {
    try {
      const addr = await this.getAddress();
      return !!addr;
    } catch (e) {
      return false;
    }
  }
  async getProvider() {
    const signer = await this.getSigner();
    if (!signer.provider) {
      throw new Error("Provider not found");
    }
    return signer.provider;
  }
  async getSigner() {
    // TODO get RPC from chains package
    const signer = this.user?.wallet.getEthersJsSigner({
      rpcEndpoint: "https://mumbai.rpc.thirdweb.com"
    });
    if (!signer) {
      throw new Error("Signer not found");
    }
    return signer;
  }
  async isAuthorized() {
    return false;
  }
  async switchChain(chainId) {
    const chainName = PaperChainMap[chainId];
    if (!chainName) {
      throw new Error("Chain not supported");
    }
    this.user?.wallet.setChain({
      chain: chainName
    });
  }
  getUser() {
    if (!this.user) {
      throw new Error("User not found");
    }
    return this.user;
  }
}

export { EmailWalletConnector, PaperChainMap };
