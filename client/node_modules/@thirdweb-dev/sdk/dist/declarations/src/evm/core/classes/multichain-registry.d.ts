import { NetworkInput, TransactionResult } from "..";
import { PublishedMetadata } from "../../schema/contracts/custom";
import { SDKOptions } from "../../schema/sdk-options";
import { AddContractInput, ContractInput, DeployedContract } from "../../types";
import { ThirdwebStorage } from "@thirdweb-dev/storage";
/**
 * @internal
 */
export declare class MultichainRegistry {
    private registryLogic;
    private registryRouter;
    private storage;
    constructor(network: NetworkInput, storage: ThirdwebStorage, options?: SDKOptions);
    updateSigner(signer: NetworkInput): Promise<void>;
    getContractMetadataURI(chainId: number, address: string): Promise<string>;
    getContractMetadata(chainId: number, address: string): Promise<PublishedMetadata>;
    getContractAddresses(walletAddress: string): Promise<DeployedContract[]>;
    addContract(contract: AddContractInput): Promise<TransactionResult>;
    addContracts(contracts: AddContractInput[]): Promise<TransactionResult>;
    removeContract(contract: ContractInput): Promise<TransactionResult>;
    removeContracts(contracts: ContractInput[]): Promise<TransactionResult>;
}
//# sourceMappingURL=multichain-registry.d.ts.map