import { ModalStyles, StyleObject } from "../../interfaces/Modal";
import { CustomizationOptionsType } from "../../interfaces/utils/IframeCommunicator";
import { IframeCommunicator } from "../../utils/iFrameCommunication/IframeCommunicator";
export declare const MODAL_ID = "pew-modal";
export declare class Modal {
    protected container: HTMLElement;
    protected main: HTMLDivElement;
    protected overlay: HTMLDivElement;
    protected iframe: HTMLIFrameElement;
    protected closeButton: HTMLButtonElement | undefined;
    protected style: HTMLStyleElement;
    protected iframeCommunicator: IframeCommunicator<{}> | undefined;
    styles: ModalStyles;
    body: HTMLDivElement;
    constructor(container?: HTMLElement, styles?: Partial<ModalStyles>);
    open({ iframeUrl, communicator, }?: {
        iframeUrl?: string;
        communicator?: IframeCommunicator<{}>;
    }): void;
    addCloseModalToggle(onCloseModal: () => void): void;
    close(): void;
    protected addListeners(): void;
    protected mergeStyles(styles: Partial<ModalStyles>): void;
    protected addAccessibility(): void;
    protected assignStyles(el: HTMLElement, styles: StyleObject): void;
}
/**
 * @see {@link EmbeddedWallet.setUpNewDevice} for an example of how this function is used
 */
export declare function openModalForFunction<ProcedureTypes extends {
    [key: string]: any;
}, IframeReturnType, ReturnType = IframeReturnType>(props: {
    clientId: string;
    path: string;
    procedure: keyof ProcedureTypes;
    params: ProcedureTypes[keyof ProcedureTypes];
    processResult?: (props: IframeReturnType) => ReturnType | Promise<ReturnType>;
    customizationOptions?: CustomizationOptionsType;
}): Promise<ReturnType | IframeReturnType>;
export declare const canOpenModal: () => boolean;
