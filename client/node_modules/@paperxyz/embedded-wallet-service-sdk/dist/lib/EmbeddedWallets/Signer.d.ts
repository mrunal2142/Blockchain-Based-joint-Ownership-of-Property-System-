import type { Provider, TransactionRequest } from "@ethersproject/abstract-provider";
import { Signer } from "@ethersproject/abstract-signer";
import type { Bytes } from "@ethersproject/bytes";
import type { Deferrable } from "@ethersproject/properties";
import { ClientIdWithQuerierType } from "../../interfaces/EmbeddedWallets/EmbeddedWallets";
import { EmbeddedWalletIframeCommunicator } from "../../utils/iFrameCommunication/EmbeddedWalletIframeCommunicator";
export declare type SignerProcedureTypes = {
    getAddress: void;
    signMessage: {
        message: string | Bytes;
        chainId: number | undefined;
    };
    signTransaction: {
        transaction: Deferrable<TransactionRequest>;
        chainId: number | undefined;
    };
    connect: {
        provider: Provider;
    };
};
export declare class EthersSigner extends Signer {
    protected querier: EmbeddedWalletIframeCommunicator<SignerProcedureTypes>;
    protected clientId: string;
    private DEFAULT_ETHEREUM_CHAIN_ID;
    constructor({ provider, clientId, querier, }: ClientIdWithQuerierType & {
        provider: Provider;
    });
    getAddress(): Promise<string>;
    signMessage(message: string | Bytes): Promise<string>;
    signTransaction(transaction: TransactionRequest): Promise<string>;
    connect(provider: Provider): EthersSigner;
}
