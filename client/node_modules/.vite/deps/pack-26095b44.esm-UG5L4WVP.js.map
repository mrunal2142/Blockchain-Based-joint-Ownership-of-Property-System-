{
  "version": 3,
  "sources": ["../../@thirdweb-dev/sdk/dist/pack-26095b44.esm.js"],
  "sourcesContent": ["import { A as AmountSchema, N as NFTInputOrUriSchema, _ as _defineProperty } from './QueryParams-da88d27c.esm.js';\nimport { af as AddressSchema, ad as BigNumberishSchema, ag as RawDateSchema, cM as ContractWrapper, d5 as FEATURE_PACK_VRF, aX as ContractEvents, b9 as fetchCurrencyMetadata, ch as LINK_TOKEN_ADDRESS, au as Erc20, aS as StandardErc1155, bZ as assertEnabled, aL as Erc1155, am as ContractMetadata, d6 as PackContractSchema, an as ContractRoles, ao as ContractRoyalty, al as ContractEncoder, aW as GasCostEstimator, aY as ContractInterceptor, a$ as ContractOwner, bC as getRoleHash, d0 as uploadOrExtractURI, ba as normalizePriceValue, d1 as hasERC20Allowance, cY as isTokenApprovedForTransfer, b_ as detectContractFeature } from './thirdweb-checkout-2c8d478b.esm.js';\nimport ERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/ERC20.json';\nimport IPackVRFAbi from '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport { BigNumber, ethers } from 'ethers';\nimport { z } from 'zod';\nimport 'bn.js';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport 'cross-fetch';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/Router.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport 'bs58';\n\n/**\n * @internal\n */\nconst CommonWrappableSchema = z.object({\n  contractAddress: AddressSchema\n});\n\n/**\n * @internal\n */\nconst ERC20WrappableSchema = CommonWrappableSchema.extend({\n  quantity: AmountSchema\n});\n\n/**\n * @internal\n */\nconst ERC721WrappableSchema = CommonWrappableSchema.extend({\n  tokenId: BigNumberishSchema\n});\n\n/**\n * @internal\n */\nconst ERC1155WrappableSchema = CommonWrappableSchema.extend({\n  tokenId: BigNumberishSchema,\n  quantity: BigNumberishSchema\n});\n\n/**\n * @internal\n */\nconst ERC20RewardSchema = ERC20WrappableSchema.omit({\n  quantity: true\n}).extend({\n  quantityPerReward: AmountSchema\n});\n\n/**\n * @internal\n */\nconst ERC721RewardSchema = ERC721WrappableSchema;\n\n/**\n * @internal\n */\nconst ERC1155RewardSchema = ERC1155WrappableSchema.omit({\n  quantity: true\n}).extend({\n  quantityPerReward: BigNumberishSchema\n});\n\n/**\n * @internal\n */\nconst ERC20RewardContentsSchema = ERC20RewardSchema.extend({\n  totalRewards: BigNumberishSchema.default(\"1\")\n});\n\n/**\n * @internal\n */\nconst ERC721RewardContentsSchema = ERC721RewardSchema;\n\n/**\n * @internal\n */\nconst ERC1155RewardContentsSchema = ERC1155RewardSchema.extend({\n  totalRewards: BigNumberishSchema.default(\"1\")\n});\n\n/**\n * @internal\n */\nz.object({\n  erc20Rewards: z.array(ERC20RewardSchema).default([]),\n  erc721Rewards: z.array(ERC721RewardSchema).default([]),\n  erc1155Rewards: z.array(ERC1155RewardSchema).default([])\n});\n\n/**\n * @internal\n */\nconst PackRewardsOutputSchema = z.object({\n  erc20Rewards: z.array(ERC20RewardContentsSchema).default([]),\n  erc721Rewards: z.array(ERC721RewardContentsSchema).default([]),\n  erc1155Rewards: z.array(ERC1155RewardContentsSchema).default([])\n});\n\n/**\n * @internal\n */\nconst PackMetadataInputSchema = PackRewardsOutputSchema.extend({\n  packMetadata: NFTInputOrUriSchema,\n  rewardsPerPack: BigNumberishSchema.default(\"1\"),\n  openStartTime: RawDateSchema.default(new Date())\n});\n\n/**\n * @public\n */\n\nclass PackVRF {\n  constructor(network, address, storage, options, chainId) {\n    let contractWrapper = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new ContractWrapper(network, address, IPackVRFAbi, options);\n    _defineProperty(this, \"featureName\", FEATURE_PACK_VRF.name);\n    _defineProperty(this, \"contractWrapper\", void 0);\n    _defineProperty(this, \"storage\", void 0);\n    _defineProperty(this, \"chainId\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.chainId = chainId;\n    this.events = new ContractEvents(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /**\n   * Open a pack using Chainlink VRFs random number generation\n   * This will return a transaction result with the requestId of the open request, NOT the contents of the pack\n   * To get the contents of the pack, you must call claimRewards once the VRF request has been fulfilled\n   * You can use the canClaimRewards method to check if the VRF request has been fulfilled\n   * @param tokenId\n   * @param amount\n   * @returns\n   */\n  async open(tokenId) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const receipt = await this.contractWrapper.sendTransaction(\"openPack\", [tokenId, amount], {\n      // Higher gas limit for opening packs\n      gasLimit: 500000\n    });\n    let id = BigNumber.from(0);\n    try {\n      const event = this.contractWrapper.parseLogs(\"PackOpenRequested\", receipt?.logs);\n      id = event[0].args.requestId;\n    } catch (e) {}\n    return {\n      receipt,\n      id\n    };\n  }\n\n  /**\n   * Claim the rewards from a pack that has been opened\n   * This will return the contents of the pack\n   * Make sure to check if the VRF request has been fulfilled using canClaimRewards() before calling this method\n   * @returns the random rewards from opening a pack\n   */\n  async claimRewards() {\n    const receipt = await this.contractWrapper.sendTransaction(\"claimRewards\", [], {\n      // Higher gas limit for opening packs\n      gasLimit: 500000\n    });\n    const event = this.contractWrapper.parseLogs(\"PackOpened\", receipt?.logs);\n    if (event.length === 0) {\n      throw new Error(\"PackOpened event not found\");\n    }\n    const rewards = event[0].args.rewardUnitsDistributed;\n    return this.parseRewards(rewards);\n  }\n  async parseRewards(rewards) {\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n    for (const reward of rewards) {\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), reward.assetContract);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward: ethers.utils.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: reward.totalAmount.toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n\n  /**\n   * Setup a listener that will be called everytime a pack is opened in this contract\n   * @param callback the listener to call when a pack is opened\n   * @returns a unsubscribe function to cleanup the listener\n   */\n  async addPackOpenEventListener(callback) {\n    return this.events.addEventListener(\"PackOpened\", async event => {\n      callback(event.data.packId.toString(), event.data.opener, await this.parseRewards(event.data.rewardUnitsDistributed));\n    });\n  }\n\n  /**\n   * Check if the connected address can claim rewards after opening a pack\n   * @param claimerAddress Optional: the address to check if they can claim rewards, defaults to the connected address\n   * @returns whether the connected address can claim rewards after opening a pack\n   */\n  async canClaimRewards(claimerAddress) {\n    const address = claimerAddress || (await this.contractWrapper.getSignerAddress());\n    return await this.contractWrapper.readContract.canClaimRewards(address);\n  }\n\n  /**\n   * Open a pack and claim the rewards in one transaction.\n   * This function will only start the flow of opening a pack, the rewards will be granted automatically to the connected address after VRF request is fulfilled\n   * @param packId The id of the pack to open\n   * @param amount Optional: the amount of packs to open, defaults to 1\n   * @param gasLimit Optional: the gas limit to use for the VRF callback transaction, defaults to 500000\n   * @returns\n   */\n  async openAndClaim(packId) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let gasLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 500000;\n    const receipt = await this.contractWrapper.sendTransaction(\"openPackAndClaimRewards\", [packId, amount, gasLimit], {\n      // Higher gas limit for opening packs\n      gasLimit: BigNumber.from(500000)\n    });\n    let id = BigNumber.from(0);\n    try {\n      const event = this.contractWrapper.parseLogs(\"PackOpenRequested\", receipt?.logs);\n      id = event[0].args.requestId;\n    } catch (e) {}\n    return {\n      receipt,\n      id\n    };\n  }\n\n  /**\n   * Get the balance of LINK in the contract\n   * @returns the balance of LINK in the contract\n   */\n  async getLinkBalance() {\n    return this.getLinkContract().balanceOf(this.contractWrapper.readContract.address);\n  }\n\n  /**\n   * Transfer LINK to this contract\n   * @param amount the amount of LINK to transfer to the contract\n   */\n  async transferLink(amount) {\n    await this.getLinkContract().transfer(this.contractWrapper.readContract.address, amount);\n  }\n  getLinkContract() {\n    const linkAddress = LINK_TOKEN_ADDRESS[this.chainId];\n    if (!linkAddress) {\n      throw new Error(`No LINK token address found for chainId ${this.chainId}`);\n    }\n    const contract = new ContractWrapper(this.contractWrapper.getSignerOrProvider(), linkAddress, ERC20Abi, this.contractWrapper.options);\n    return new Erc20(contract, this.storage, this.chainId);\n  }\n}\n\n/**\n * Create lootboxes of NFTs with rarity based open mechanics.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"pack\");\n * ```\n *\n * @public\n */\nclass Pack extends StandardErc1155 {\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per pack\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular pack\n   * contract.royalties.setTokenRoyaltyInfo(packId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  /**\n   * If enabled in the contract, use the Chainlink VRF functionality to open packs\n   */\n  get vrf() {\n    return assertEnabled(this._vrf, FEATURE_PACK_VRF);\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options.gasless && \"openzeppelin\" in options.gasless ? {\n      ...options,\n      gasless: {\n        openzeppelin: {\n          ...options.gasless.openzeppelin,\n          useEOAForwarder: true\n        }\n      }\n    } : options);\n    super(contractWrapper, storage, chainId);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"royalties\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"erc1155\", void 0);\n    _defineProperty(this, \"owner\", void 0);\n    _defineProperty(this, \"_vrf\", void 0);\n    this.abi = abi;\n    this.erc1155 = new Erc1155(this.contractWrapper, this.storage, chainId);\n    this.metadata = new ContractMetadata(this.contractWrapper, PackContractSchema, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Pack.contractRoles);\n    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.owner = new ContractOwner(this.contractWrapper);\n    this._vrf = this.detectVrf();\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n    this._vrf?.onNetworkUpdated(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a single Pack\n   *\n   * @remarks Get all the data associated with every pack in this contract.\n   *\n   * By default, returns the first 100 packs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const pack = await contract.get(0);\n   * console.log(packs;\n   * ```\n   */\n  async get(tokenId) {\n    return this.erc1155.get(tokenId);\n  }\n\n  /**\n   * Get All Packs\n   *\n   * @remarks Get all the data associated with every pack in this contract.\n   *\n   * By default, returns the first 100 packs, use queryParams to fetch more.\n   *\n   * @example\n   * ```javascript\n   * const packs = await contract.getAll();\n   * console.log(packs;\n   * ```\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The pack metadata for all packs queried.\n   */\n  async getAll(queryParams) {\n    return this.erc1155.getAll(queryParams);\n  }\n\n  /**\n   * Get Owned Packs\n   *\n   * @remarks Get all the data associated with the packs owned by a specific wallet.\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet to get the packs of\n   * const address = \"{{wallet_address}}\";\n   * const packss = await contract.getOwned(address);\n   * ```\n   *\n   * @returns The pack metadata for all the owned packs in the contract.\n   */\n  async getOwned(walletAddress) {\n    return this.erc1155.getOwned(walletAddress);\n  }\n\n  /**\n   * Get the number of packs created\n   * @returns the total number of packs minted in this contract\n   * @public\n   */\n  async getTotalCount() {\n    return this.erc1155.totalCount();\n  }\n\n  /**\n   * Get whether users can transfer packs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), ethers.constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n\n  /**\n   * Get Pack Contents\n   * @remarks Get the rewards contained inside a pack.\n   *\n   * @param packId - The id of the pack to get the contents of.\n   * @returns - The contents of the pack.\n   *\n   * @example\n   * ```javascript\n   * const packId = 0;\n   * const contents = await contract.getPackContents(packId);\n   * console.log(contents.erc20Rewards);\n   * console.log(contents.erc721Rewards);\n   * console.log(contents.erc1155Rewards);\n   * ```\n   */\n  async getPackContents(packId) {\n    const {\n      contents,\n      perUnitAmounts\n    } = await this.contractWrapper.readContract.getPackContents(packId);\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n    for (let i = 0; i < contents.length; i++) {\n      const reward = contents[i];\n      const amount = perUnitAmounts[i];\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), reward.assetContract);\n            const rewardAmount = ethers.utils.formatUnits(reward.totalAmount, tokenMetadata.decimals);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward: amount.toString(),\n              totalRewards: BigNumber.from(rewardAmount).div(amount).toString()\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: amount.toString(),\n              totalRewards: BigNumber.from(reward.totalAmount).div(amount).toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Pack\n   * @remarks Create a new pack with the given metadata and rewards and mint it to the connected wallet.\n   * @remarks See {@link Pack.createTo}\n   *\n   * @param metadataWithRewards - the metadata and rewards to include in the pack\n   * @example\n   * ```javascript\n   * const pack = {\n   *   // The metadata for the pack NFT itself\n   *   packMetadata: {\n   *     name: \"My Pack\",\n   *     description: \"This is a new pack\",\n   *     image: \"ipfs://...\",\n   *   },\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n   *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n   * }\n   *\n   * const tx = await contract.create(pack);\n   * ```\n   */\n  async create(metadataWithRewards) {\n    const signerAddress = await this.contractWrapper.getSignerAddress();\n    return this.createTo(signerAddress, metadataWithRewards);\n  }\n\n  /**\n   * Add Pack Contents\n   * @remarks Add contents to an existing pack.\n   * @remarks See {@link Pack.addPackContents}\n   *\n   * @param packId - token Id of the pack to add contents to\n   * @param packContents - the rewards to include in the pack\n   * @example\n   * ```javascript\n   * const packContents = {\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   * }\n   *\n   * const tx = await contract.addPackContents(packId, packContents);\n   * ```\n   */\n  async addPackContents(packId, packContents) {\n    const signerAddress = await this.contractWrapper.getSignerAddress();\n    const parsedContents = PackRewardsOutputSchema.parse(packContents);\n    const {\n      contents,\n      numOfRewardUnits\n    } = await this.toPackContentArgs(parsedContents);\n    const receipt = await this.contractWrapper.sendTransaction(\"addPackContents\", [packId, contents, numOfRewardUnits, signerAddress]);\n    const event = this.contractWrapper.parseLogs(\"PackUpdated\", receipt?.logs);\n    if (event.length === 0) {\n      throw new Error(\"PackUpdated event not found\");\n    }\n    const id = event[0].args.packId;\n    return {\n      id: id,\n      receipt,\n      data: () => this.erc1155.get(id)\n    };\n  }\n\n  /**\n   * Create Pack To Wallet\n   * @remarks Create a new pack with the given metadata and rewards and mint it to the specified address.\n   *\n   * @param to - the address to mint the pack to\n   * @param metadataWithRewards - the metadata and rewards to include in the pack\n   *\n   * @example\n   * ```javascript\n   * const pack = {\n   *   // The metadata for the pack NFT itself\n   *   packMetadata: {\n   *     name: \"My Pack\",\n   *     description: \"This is a new pack\",\n   *     image: \"ipfs://...\",\n   *   },\n   *   // ERC20 rewards to be included in the pack\n   *   erc20Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       quantityPerReward: 5,\n   *       quantity: 100,\n   *       totalRewards: 20,\n   *     }\n   *   ],\n   *   // ERC721 rewards to be included in the pack\n   *   erc721Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       tokenId: 0,\n   *     }\n   *   ],\n   *   // ERC1155 rewards to be included in the pack\n   *   erc1155Rewards: [\n   *     {\n   *       assetContract: \"0x...\",\n   *       tokenId: 0,\n   *       quantityPerReward: 1,\n   *       totalRewards: 100,\n   *     }\n   *   ],\n   *   openStartTime: new Date(), // the date that packs can start to be opened, defaults to now\n   *   rewardsPerPack: 1, // the number of rewards in each pack, defaults to 1\n   * }\n   *\n   * const tx = await contract.createTo(\"0x...\", pack);\n   * ```\n   */\n  async createTo(to, metadataWithRewards) {\n    const uri = await uploadOrExtractURI(metadataWithRewards.packMetadata, this.storage);\n    const parsedMetadata = PackMetadataInputSchema.parse(metadataWithRewards);\n    const {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    } = parsedMetadata;\n    const rewardsData = {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n    const {\n      contents,\n      numOfRewardUnits\n    } = await this.toPackContentArgs(rewardsData);\n    const receipt = await this.contractWrapper.sendTransaction(\"createPack\", [contents, numOfRewardUnits, uri, parsedMetadata.openStartTime, parsedMetadata.rewardsPerPack, to]);\n    const event = this.contractWrapper.parseLogs(\"PackCreated\", receipt?.logs);\n    if (event.length === 0) {\n      throw new Error(\"PackCreated event not found\");\n    }\n    const packId = event[0].args.packId;\n    return {\n      id: packId,\n      receipt,\n      data: () => this.erc1155.get(packId)\n    };\n  }\n\n  /**\n   * Open Pack\n   *\n   * @remarks - Open a pack to reveal the contained rewards. This will burn the specified pack and\n   * the contained assets will be transferred to the opening users wallet.\n   *\n   * @param tokenId - the token ID of the pack you want to open\n   * @param amount - the amount of packs you want to open\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0\n   * const amount = 1\n   * const tx = await contract.open(tokenId, amount);\n   * ```\n   */\n  async open(tokenId) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    if (this._vrf) {\n      throw new Error(\"This contract is using Chainlink VRF, use `contract.vrf.open()` or `contract.vrf.openAndClaim()` instead\");\n    }\n    const receipt = await this.contractWrapper.sendTransaction(\"openPack\", [tokenId, amount], {\n      // Higher gas limit for opening packs\n      gasLimit: 500000\n    });\n    const event = this.contractWrapper.parseLogs(\"PackOpened\", receipt?.logs);\n    if (event.length === 0) {\n      throw new Error(\"PackOpened event not found\");\n    }\n    const rewards = event[0].args.rewardUnitsDistributed;\n    const erc20Rewards = [];\n    const erc721Rewards = [];\n    const erc1155Rewards = [];\n    for (const reward of rewards) {\n      switch (reward.tokenType) {\n        case 0:\n          {\n            const tokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), reward.assetContract);\n            erc20Rewards.push({\n              contractAddress: reward.assetContract,\n              quantityPerReward: ethers.utils.formatUnits(reward.totalAmount, tokenMetadata.decimals).toString()\n            });\n            break;\n          }\n        case 1:\n          {\n            erc721Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString()\n            });\n            break;\n          }\n        case 2:\n          {\n            erc1155Rewards.push({\n              contractAddress: reward.assetContract,\n              tokenId: reward.tokenId.toString(),\n              quantityPerReward: reward.totalAmount.toString()\n            });\n            break;\n          }\n      }\n    }\n    return {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    };\n  }\n\n  /** *****************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async toPackContentArgs(metadataWithRewards) {\n    const contents = [];\n    const numOfRewardUnits = [];\n    const {\n      erc20Rewards,\n      erc721Rewards,\n      erc1155Rewards\n    } = metadataWithRewards;\n    const provider = this.contractWrapper.getProvider();\n    const owner = await this.contractWrapper.getSignerAddress();\n    for (const erc20 of erc20Rewards) {\n      const normalizedQuantity = await normalizePriceValue(provider, erc20.quantityPerReward, erc20.contractAddress);\n      // Multiply the quantity of one reward by the number of rewards\n      const totalQuantity = normalizedQuantity.mul(erc20.totalRewards);\n      const hasAllowance = await hasERC20Allowance(this.contractWrapper, erc20.contractAddress, totalQuantity);\n      if (!hasAllowance) {\n        throw new Error(`ERC20 token with contract address \"${erc20.contractAddress}\" does not have enough allowance to transfer.\\n\\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\\n\\nawait sdk.getToken(\"${erc20.contractAddress}\").setAllowance(\"${this.getAddress()}\", ${totalQuantity});\\n\\n`);\n      }\n      numOfRewardUnits.push(erc20.totalRewards);\n      contents.push({\n        assetContract: erc20.contractAddress,\n        tokenType: 0,\n        totalAmount: totalQuantity,\n        tokenId: 0\n      });\n    }\n    for (const erc721 of erc721Rewards) {\n      const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc721.contractAddress, erc721.tokenId, owner);\n      if (!isApproved) {\n        throw new Error(`ERC721 token \"${erc721.tokenId}\" with contract address \"${erc721.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getNFTCollection(\"${erc721.contractAddress}\").setApprovalForToken(\"${this.getAddress()}\", ${erc721.tokenId});\\n\\n`);\n      }\n      numOfRewardUnits.push(\"1\");\n      contents.push({\n        assetContract: erc721.contractAddress,\n        tokenType: 1,\n        totalAmount: 1,\n        tokenId: erc721.tokenId\n      });\n    }\n    for (const erc1155 of erc1155Rewards) {\n      const isApproved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), erc1155.contractAddress, erc1155.tokenId, owner);\n      if (!isApproved) {\n        throw new Error(`ERC1155 token \"${erc1155.tokenId}\" with contract address \"${erc1155.contractAddress}\" is not approved for transfer.\\n\\nYou can give approval the multiwrap contract to transfer this token by running:\\n\\nawait sdk.getEdition(\"${erc1155.contractAddress}\").setApprovalForAll(\"${this.getAddress()}\", true);\\n\\n`);\n      }\n      numOfRewardUnits.push(erc1155.totalRewards);\n      contents.push({\n        assetContract: erc1155.contractAddress,\n        tokenType: 2,\n        totalAmount: BigNumber.from(erc1155.quantityPerReward).mul(BigNumber.from(erc1155.totalRewards)),\n        tokenId: erc1155.tokenId\n      });\n    }\n    return {\n      contents,\n      numOfRewardUnits\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n  detectVrf() {\n    if (detectContractFeature(this.contractWrapper, \"PackVRF\")) {\n      return new PackVRF(this.contractWrapper.getSignerOrProvider(), this.contractWrapper.readContract.address, this.storage, this.contractWrapper.options, this.chainId);\n    }\n    return undefined;\n  }\n}\n_defineProperty(Pack, \"contractRoles\", [\"admin\", \"minter\", \"asset\", \"transfer\"]);\n\nexport { Pack };\n"],
  "mappings": "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",
  "names": []
}
