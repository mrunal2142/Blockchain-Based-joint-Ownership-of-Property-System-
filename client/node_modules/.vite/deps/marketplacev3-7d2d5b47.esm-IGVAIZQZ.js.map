{
  "version": 3,
  "sources": ["../../@thirdweb-dev/sdk/dist/marketplacev3-7d2d5b47.esm.js"],
  "sourcesContent": ["import { A as AmountSchema, _ as _defineProperty } from './QueryParams-da88d27c.esm.js';\nimport { af as AddressSchema, ad as BigNumberishSchema, ce as NATIVE_TOKEN_ADDRESS, ag as RawDateSchema, ai as EndDateSchema, cS as FEATURE_DIRECT_LISTINGS, aX as ContractEvents, al as ContractEncoder, aY as ContractInterceptor, aW as GasCostEstimator, cT as getAllInBatches, cU as handleTokenApproval, ba as normalizePriceValue, cV as cleanCurrencyAddress, cW as setErc20Allowance, b4 as Status, b8 as fetchCurrencyValue, cX as fetchTokenMetadataForContract, cY as isTokenApprovedForTransfer, cc as InterfaceId_IERC721, cd as InterfaceId_IERC1155, cZ as FEATURE_ENGLISH_AUCTIONS, b9 as fetchCurrencyMetadata, bv as AuctionHasNotEndedError, c_ as FEATURE_OFFERS, cR as isNativeToken, cf as NATIVE_TOKENS, cM as ContractWrapper, bZ as assertEnabled, am as ContractMetadata, cP as MarketplaceContractSchema, an as ContractRoles, aZ as ContractPlatformFee, b_ as detectContractFeature } from './thirdweb-checkout-2c8d478b.esm.js';\nimport { z } from 'zod';\nimport ERC165Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport Erc721Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport Erc1155Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport { BigNumber, Contract, constants, ethers } from 'ethers';\nimport invariant from 'tiny-invariant';\nimport ERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport 'bn.js';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport 'cross-fetch';\nimport '@thirdweb-dev/chains';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/Router.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport 'bs58';\n\n/**\n * @internal\n */\nconst DirectListingInputParamsSchema = z.object({\n  /**\n   * The address of the asset being listed.\n   */\n  assetContractAddress: AddressSchema,\n  /**\n   * The ID of the token to list.\n   */\n  tokenId: BigNumberishSchema,\n  /**\n   * The quantity of tokens to include in the listing.\n   *\n   * For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n   */\n  quantity: BigNumberishSchema.default(1),\n  /**\n   * The address of the currency to accept for the listing.\n   */\n  currencyContractAddress: AddressSchema.default(NATIVE_TOKEN_ADDRESS),\n  /**\n   * The price to pay per unit of NFTs listed.\n   */\n  pricePerToken: AmountSchema,\n  /**\n   * The start time of the listing.\n   */\n  startTimestamp: RawDateSchema.default(new Date()),\n  /**\n   * The end time of the listing.\n   */\n  endTimestamp: EndDateSchema,\n  /**\n   * Whether the listing is reserved to be bought from a specific set of buyers.\n   */\n  isReservedListing: z.boolean().default(false)\n});\n\n/**\n * @public\n */\n\n/**\n * Handles direct listings\n * @public\n */\nclass MarketplaceV3DirectListings {\n  // utilities\n\n  constructor(contractWrapper, storage) {\n    _defineProperty(this, \"featureName\", FEATURE_DIRECT_LISTINGS.name);\n    _defineProperty(this, \"contractWrapper\", void 0);\n    _defineProperty(this, \"storage\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.events = new ContractEvents(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total number of direct listings.\n   * @returns Returns the total number of direct listings created.\n   * @public\n   *\n   * @example\n   * ```javascript\n   * const totalListings = await contract.directListings.getTotalCount();\n   * ```\n   */\n  async getTotalCount() {\n    return await this.contractWrapper.readContract.totalListings();\n  }\n\n  /**\n   * Get all direct listings.\n   *\n   * @example\n   * ```javascript\n   * const listings = await contract.directListings.getAll();\n   * const priceOfFirstListing = listings[0].price;\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Direct listing object array\n   */\n  async getAll(filter) {\n    const totalListings = await this.getTotalCount();\n    let start = BigNumber.from(filter?.start || 0).toNumber();\n    let end = totalListings.toNumber();\n    if (end === 0) {\n      throw new Error(`No listings exist on the contract.`);\n    }\n    let rawListings = [];\n    let batches = await getAllInBatches(start, end, this.contractWrapper.readContract.getAllListings);\n    rawListings = batches.flat();\n    const filteredListings = this.applyFilter(rawListings, filter);\n    return await Promise.all(filteredListings.map(listing => this.mapListing(listing)));\n  }\n\n  /**\n   * Get all valid direct listings.\n   *\n   * A valid listing is where the listing is active,\n   * and the creator still owns & has approved Marketplace to transfer the listed NFTs.\n   *\n   * @example\n   * ```javascript\n   * const listings = await contract.directListings.getAllValid();\n   * const priceOfFirstListing = listings[0].price;\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Direct listing object array\n   */\n  async getAllValid(filter) {\n    const totalListings = await this.getTotalCount();\n    let start = BigNumber.from(filter?.start || 0).toNumber();\n    let end = totalListings.toNumber();\n    if (end === 0) {\n      throw new Error(`No listings exist on the contract.`);\n    }\n    let rawListings = [];\n    let batches = await getAllInBatches(start, end, this.contractWrapper.readContract.getAllValidListings);\n    rawListings = batches.flat();\n    const filteredListings = this.applyFilter(rawListings, filter);\n    return await Promise.all(filteredListings.map(listing => this.mapListing(listing)));\n  }\n\n  /**\n   * Get a direct listing by id.\n   *\n   * @param listingId - the listing id\n   * @returns the Direct listing object\n   *\n   * @example\n   * ```javascript\n   * const listingId = 0;\n   * const listing = await contract.directListings.getListing(listingId);\n   * ```\n   */\n  async getListing(listingId) {\n    const listing = await this.contractWrapper.readContract.getListing(listingId);\n    return await this.mapListing(listing);\n  }\n\n  /**\n   * Check whether a buyer is approved for a reserved listing.\n   *\n   * @param listingId - the listing id\n   * @param buyer - buyer address\n   */\n  async isBuyerApprovedForListing(listingId, buyer) {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    if (!listing.isReservedListing) {\n      throw new Error(`Listing ${listingId} is not a reserved listing.`);\n    }\n    return await this.contractWrapper.readContract.isBuyerApprovedForListing(listingId, buyer);\n  }\n\n  /**\n   * Check whether a currency is approved for a listing.\n   *\n   * @param listingId - the listing id\n   * @param currency - currency address\n   */\n  async isCurrencyApprovedForListing(listingId, currency) {\n    await this.validateListing(BigNumber.from(listingId));\n    return await this.contractWrapper.readContract.isCurrencyApprovedForListing(listingId, currency);\n  }\n\n  /**\n   * Check price per token for an approved currency.\n   *\n   * @param listingId - the listing id\n   * @param currencyContractAddress - currency contract address\n   */\n  async currencyPriceForListing(listingId, currencyContractAddress) {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    if (currencyContractAddress === listing.currencyContractAddress) {\n      return listing.pricePerToken;\n    }\n    const isApprovedCurrency = await this.isCurrencyApprovedForListing(listingId, currencyContractAddress);\n    if (!isApprovedCurrency) {\n      throw new Error(`Currency ${currencyContractAddress} is not approved for Listing ${listingId}.`);\n    }\n    return await this.contractWrapper.readContract.currencyPriceForListing(listingId, currencyContractAddress);\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Direct Listing\n   *\n   * @remarks Create a new listing on the marketplace where people can buy an asset directly.\n   *\n   * @example\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // The price to pay per unit of NFTs listed.\n   *   pricePerToken: 1.5,\n   *   // when should the listing open up for offers\n   *   startTimestamp: new Date(Date.now()),\n   *   // how long the listing will be open for\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   *   // Whether the listing is reserved for a specific set of buyers.\n   *   isReservedListing: false\n   * }\n   *\n   * const tx = await contract.directListings.createListing(listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   * ```\n   */\n  async createListing(listing) {\n    const parsedListing = DirectListingInputParamsSchema.parse(listing);\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), parsedListing.assetContractAddress, parsedListing.tokenId, await this.contractWrapper.getSignerAddress());\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), parsedListing.pricePerToken, parsedListing.currencyContractAddress);\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    if (parsedListing.startTimestamp.lt(blockTime)) {\n      parsedListing.startTimestamp = BigNumber.from(blockTime);\n    }\n    const receipt = await this.contractWrapper.sendTransaction(\"createListing\", [{\n      assetContract: parsedListing.assetContractAddress,\n      tokenId: parsedListing.tokenId,\n      quantity: parsedListing.quantity,\n      currency: cleanCurrencyAddress(parsedListing.currencyContractAddress),\n      pricePerToken: normalizedPricePerToken,\n      startTimestamp: parsedListing.startTimestamp,\n      endTimestamp: parsedListing.endTimestamp,\n      reserved: parsedListing.isReservedListing\n    }], {\n      // Higher gas limit for create listing\n      gasLimit: 500000\n    });\n    const event = this.contractWrapper.parseLogs(\"NewListing\", receipt?.logs);\n    return {\n      id: event[0].args.listingId,\n      receipt\n    };\n  }\n\n  /**\n   * Update a Direct listing with new metadata.\n   *\n   * Note: cannot update a listing with a new quantity of 0. Use `cancelDirectListing` to remove a listing instead.\n   *\n   * @param listing - the new listing information\n   *\n   * @example\n   * ```javascript\n   * // Data of the listing you want to update\n   *\n   * const listingId = 0; // ID of the listing you want to update\n   *\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\", // should be same as original listing\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\", // should be same as original listing\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // The price to pay per unit of NFTs listed.\n   *   pricePerToken: 1.5,\n   *   // when should the listing open up for offers\n   *   startTimestamp: new Date(Date.now()), // can't change this if listing already active\n   *   // how long the listing will be open for\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   *   // Whether the listing is reserved for a specific set of buyers.\n   *   isReservedListing: false\n   * }\n   *\n   * const tx = await contract.directListings.updateListing(listingId, listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   * ```\n   */\n  async updateListing(listingId, listing) {\n    const parsedListing = DirectListingInputParamsSchema.parse(listing);\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), parsedListing.assetContractAddress, parsedListing.tokenId, await this.contractWrapper.getSignerAddress());\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), parsedListing.pricePerToken, parsedListing.currencyContractAddress);\n    const receipt = await this.contractWrapper.sendTransaction(\"updateListing\", [listingId, {\n      assetContract: parsedListing.assetContractAddress,\n      tokenId: parsedListing.tokenId,\n      quantity: parsedListing.quantity,\n      currency: cleanCurrencyAddress(parsedListing.currencyContractAddress),\n      pricePerToken: normalizedPricePerToken,\n      startTimestamp: parsedListing.startTimestamp,\n      endTimestamp: parsedListing.endTimestamp,\n      reserved: parsedListing.isReservedListing\n    }], {\n      // Higher gas limit for create listing\n      gasLimit: 500000\n    });\n    const event = this.contractWrapper.parseLogs(\"UpdatedListing\", receipt?.logs);\n    return {\n      id: event[0].args.listingId,\n      receipt\n    };\n  }\n\n  /**\n   * Cancel Direct Listing\n   *\n   * @remarks Cancel a direct listing on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want to cancel\n   * const listingId = 0;\n   *\n   * await contract.directListings.cancelListing(listingId);\n   * ```\n   */\n  async cancelListing(listingId) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"cancelListing\", [listingId])\n    };\n  }\n\n  /**\n   * Buy from a Listing\n   *\n   * @remarks Buy from a specific direct listing from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The ID of the listing you want to buy from\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await contract.directListings.buyFromListing(listingId, quantityDesired);\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param quantityDesired - the quantity to buy\n   * @param receiver - optional receiver of the bought listing if different from the connected wallet\n   */\n  async buyFromListing(listingId, quantityDesired, receiver) {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const {\n      valid,\n      error\n    } = await this.isStillValidListing(listing, quantityDesired);\n    if (!valid) {\n      throw new Error(`Listing ${listingId} is no longer valid. ${error}`);\n    }\n    const buyFor = receiver ? receiver : await this.contractWrapper.getSignerAddress();\n    const quantity = BigNumber.from(quantityDesired);\n    const value = BigNumber.from(listing.pricePerToken).mul(quantity);\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(this.contractWrapper, value, listing.currencyContractAddress, overrides);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"buyFromListing\", [listingId, buyFor, quantity, listing.currencyContractAddress, value], overrides)\n    };\n  }\n\n  /**\n   * Approve buyer for reserved listing.\n   *\n   * @remarks Approve a buyer to buy from a reserved listing.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want approve buyer for\n   * const listingId = \"0\";\n   *\n   * await contract.directListings.approveBuyerForReservedListing(listingId, buyer);\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param buyer - Address of buyer being approved\n   */\n  async approveBuyerForReservedListing(listingId, buyer) {\n    const isApproved = await this.isBuyerApprovedForListing(listingId, buyer);\n    if (!isApproved) {\n      return {\n        receipt: await this.contractWrapper.sendTransaction(\"approveBuyerForListing\", [listingId, buyer, true])\n      };\n    } else {\n      throw new Error(`Buyer ${buyer} already approved for listing ${listingId}.`);\n    }\n  }\n\n  /**\n   * Revoke approval of a buyer for reserved listing.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want approve buyer for\n   * const listingId = \"0\";\n   *\n   * await contract.directListings.revokeBuyerApprovalForReservedListing(listingId, buyer);\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param buyer - Address of buyer being approved\n   */\n  async revokeBuyerApprovalForReservedListing(listingId, buyer) {\n    const isApproved = await this.isBuyerApprovedForListing(listingId, buyer);\n    if (isApproved) {\n      return {\n        receipt: await this.contractWrapper.sendTransaction(\"approveBuyerForListing\", [listingId, buyer, false])\n      };\n    } else {\n      throw new Error(`Buyer ${buyer} not approved for listing ${listingId}.`);\n    }\n  }\n\n  /**\n   * Approve a currency for a listing.\n   *\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want approve currency for\n   * const listingId = \"0\";\n   *\n   * await contract.directListings.approveCurrencyForListing(listingId, currencyContractAddress, pricePerTokenInCurrency);\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param currencyContractAddress - Address of currency being approved\n   * @param pricePerTokenInCurrency - Price per token in the currency\n   */\n  async approveCurrencyForListing(listingId, currencyContractAddress, pricePerTokenInCurrency) {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    if (currencyContractAddress === listing.currencyContractAddress) {\n      invariant(pricePerTokenInCurrency === listing.pricePerToken, \"Approving listing currency with a different price.\");\n    }\n    const currencyPrice = await this.contractWrapper.readContract.currencyPriceForListing(listingId, currencyContractAddress);\n    invariant(pricePerTokenInCurrency === currencyPrice, \"Currency already approved with this price.\");\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"approveCurrencyForListing\", [listingId, currencyContractAddress, pricePerTokenInCurrency])\n    };\n  }\n\n  /**\n   * Revoke approval of a currency from a listing.\n   *\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want to revoke currency for\n   * const listingId = \"0\";\n   *\n   * await contract.directListings.revokeCurrencyApprovalForListing(listingId, currencyContractAddress);\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param currencyContractAddress - Address of currency\n   */\n  async revokeCurrencyApprovalForListing(listingId, currencyContractAddress) {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    if (currencyContractAddress === listing.currencyContractAddress) {\n      throw new Error(`Can't revoke approval for main listing currency.`);\n    }\n    const currencyPrice = await this.contractWrapper.readContract.currencyPriceForListing(listingId, currencyContractAddress);\n    invariant(!currencyPrice.isZero(), \"Currency not approved.\");\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"approveCurrencyForListing\", [listingId, currencyContractAddress, BigNumber.from(0)])\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  async validateListing(listingId) {\n    try {\n      return await this.getListing(listingId);\n    } catch (err) {\n      console.error(`Error getting the listing with id ${listingId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction listing to the direct listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapListing(listing) {\n    let status = Status.UNSET;\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    switch (listing.status) {\n      case 1:\n        status = BigNumber.from(listing.startTimestamp).gt(blockTime) ? Status.Created : BigNumber.from(listing.endTimestamp).lt(blockTime) ? Status.Expired : Status.Active;\n        break;\n      case 2:\n        status = Status.Completed;\n        break;\n      case 3:\n        status = Status.Cancelled;\n        break;\n    }\n    return {\n      assetContractAddress: listing.assetContract,\n      currencyContractAddress: listing.currency,\n      pricePerToken: listing.pricePerToken.toString(),\n      currencyValuePerToken: await fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currency, listing.pricePerToken),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId.toString(),\n      quantity: listing.quantity.toString(),\n      startTimeInSeconds: BigNumber.from(listing.startTimestamp).toNumber(),\n      asset: await fetchTokenMetadataForContract(listing.assetContract, this.contractWrapper.getProvider(), listing.tokenId, this.storage),\n      endTimeInSeconds: BigNumber.from(listing.endTimestamp).toNumber(),\n      creatorAddress: listing.listingCreator,\n      isReservedListing: listing.reserved,\n      status: status\n    };\n  }\n\n  /**\n   * Use this method to check if a direct listing is still valid.\n   *\n   * Ways a direct listing can become invalid:\n   * 1. The asset holder transferred the asset to another wallet\n   * 2. The asset holder burned the asset\n   * 3. The asset holder removed the approval on the marketplace\n   *\n   * @internal\n   * @param listing - The listing to check.\n   * @returns - True if the listing is valid, false otherwise.\n   */\n  async isStillValidListing(listing, quantity) {\n    const approved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), listing.assetContractAddress, listing.tokenId, listing.creatorAddress);\n    if (!approved) {\n      return {\n        valid: false,\n        error: `Token '${listing.tokenId}' from contract '${listing.assetContractAddress}' is not approved for transfer`\n      };\n    }\n    const provider = this.contractWrapper.getProvider();\n    const erc165 = new Contract(listing.assetContractAddress, ERC165Abi, provider);\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n    const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n    if (isERC721) {\n      const asset = new Contract(listing.assetContractAddress, Erc721Abi, provider);\n      const valid = (await asset.ownerOf(listing.tokenId)).toLowerCase() === listing.creatorAddress.toLowerCase();\n      return {\n        valid,\n        error: valid ? undefined : `Seller is not the owner of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} anymore'`\n      };\n    } else if (isERC1155) {\n      const asset = new Contract(listing.assetContractAddress, Erc1155Abi, provider);\n      const balance = await asset.balanceOf(listing.creatorAddress, listing.tokenId);\n      const valid = balance.gte(quantity || listing.quantity);\n      return {\n        valid,\n        error: valid ? undefined : `Seller does not have enough balance of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} to fulfill the listing`\n      };\n    } else {\n      return {\n        valid: false,\n        error: \"Contract does not implement ERC 1155 or ERC 721.\"\n      };\n    }\n  }\n  applyFilter(listings, filter) {\n    let rawListings = [...listings];\n    if (filter) {\n      if (filter.seller) {\n        rawListings = rawListings.filter(seller => seller.listingCreator.toString().toLowerCase() === filter?.seller?.toString().toLowerCase());\n      }\n      if (filter.tokenContract) {\n        rawListings = rawListings.filter(tokenContract => tokenContract.assetContract.toString().toLowerCase() === filter?.tokenContract?.toString().toLowerCase());\n      }\n      if (filter.tokenId !== undefined) {\n        rawListings = rawListings.filter(tokenContract => tokenContract.tokenId.toString() === filter?.tokenId?.toString());\n      }\n    }\n    return filter?.count && filter.count < rawListings.length ? rawListings.slice(0, filter.count) : rawListings;\n  }\n}\n\n/**\n * @internal\n */\nconst EnglishAuctionInputParamsSchema = z.object({\n  /**\n   * The address of the asset being auctioned.\n   */\n  assetContractAddress: AddressSchema,\n  /**\n   * The ID of the token to auction.\n   */\n  tokenId: BigNumberishSchema,\n  /**\n   * The quantity of tokens to include in the listing.\n   *\n   * For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n   */\n  quantity: BigNumberishSchema.default(1),\n  /**\n   * The address of the currency to accept for the listing.\n   */\n  currencyContractAddress: AddressSchema.default(NATIVE_TOKEN_ADDRESS),\n  /**\n   * The minimum price that a bid must be in order to be accepted.\n   */\n  minimumBidAmount: AmountSchema,\n  /**\n   * The buyout price of the auction.\n   */\n  buyoutBidAmount: AmountSchema,\n  /**\n   * This is a buffer e.g. x seconds.\n   *\n   * If a new winning bid is made less than x seconds before expirationTimestamp, the\n   * expirationTimestamp is increased by x seconds.\n   */\n  timeBufferInSeconds: BigNumberishSchema.default(900),\n  // 15 minutes by default\n\n  /**\n   * This is a buffer in basis points e.g. x%.\n   *\n   * To be considered as a new winning bid, a bid must be at least x% greater than\n   * the current winning bid.\n   */\n  bidBufferBps: BigNumberishSchema.default(500),\n  // 5% by default\n\n  /**\n   * The start time of the auction.\n   */\n  startTimestamp: RawDateSchema.default(new Date()),\n  /**\n   * The end time of the auction.\n   */\n  endTimestamp: EndDateSchema\n});\n\n/**\n * @public\n */\n\n/**\n * Handles auctions\n * @public\n */\nclass MarketplaceV3EnglishAuctions {\n  // utilities\n\n  constructor(contractWrapper, storage) {\n    _defineProperty(this, \"featureName\", FEATURE_ENGLISH_AUCTIONS.name);\n    _defineProperty(this, \"contractWrapper\", void 0);\n    _defineProperty(this, \"storage\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.events = new ContractEvents(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total number of english auctions.\n   * @returns Returns the total number of auctions created.\n   * @public\n   *\n   * @example\n   * ```javascript\n   * const totalAuctions = await contract.englishAuctions.getTotalCount();\n   * ```\n   */\n  async getTotalCount() {\n    return await this.contractWrapper.readContract.totalAuctions();\n  }\n\n  /**\n   * Get all auctions.\n   *\n   * @example\n   * ```javascript\n   * const auctions = await contract.englishAuctions.getAll();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Auction object array\n   */\n  async getAll(filter) {\n    const totalAuctions = await this.getTotalCount();\n    let start = BigNumber.from(filter?.start || 0).toNumber();\n    let end = totalAuctions.toNumber();\n    if (end === 0) {\n      throw new Error(`No auctions exist on the contract.`);\n    }\n    let rawAuctions = [];\n    let batches = await getAllInBatches(start, end, this.contractWrapper.readContract.getAllAuctions);\n    rawAuctions = batches.flat();\n    const filteredAuctions = this.applyFilter(rawAuctions, filter);\n    return await Promise.all(filteredAuctions.map(auction => this.mapAuction(auction)));\n  }\n\n  /**\n   * Get all valid auctions.\n   *\n   * @example\n   * ```javascript\n   * const auctions = await contract.englishAuctions.getAllValid();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Auction object array\n   */\n  async getAllValid(filter) {\n    const totalAuctions = await this.getTotalCount();\n    let start = BigNumber.from(filter?.start || 0).toNumber();\n    let end = totalAuctions.toNumber();\n    if (end === 0) {\n      throw new Error(`No auctions exist on the contract.`);\n    }\n    let rawAuctions = [];\n    let batches = await getAllInBatches(start, end, this.contractWrapper.readContract.getAllValidAuctions);\n    rawAuctions = batches.flat();\n    const filteredAuctions = this.applyFilter(rawAuctions, filter);\n    return await Promise.all(filteredAuctions.map(auction => this.mapAuction(auction)));\n  }\n\n  /**\n   * Get an Auction by id.\n   *\n   * @example\n   * ```javascript\n   * const auctionId = 0;\n   * const auction = await contract.englishAuctions.getAuction(auctionId);\n   * ```\n   *\n   * @param auctionId - the auction Id\n   * @returns the Auction object\n   */\n  async getAuction(auctionId) {\n    const auction = await this.contractWrapper.readContract.getAuction(auctionId);\n    return await this.mapAuction(auction);\n  }\n\n  /**\n   * Get Highest Bid\n   *\n   * @remarks Get the current highest bid of an active auction.\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction\n   * const auctionId = 0;\n   *\n   * contract.englishAuctions.\n   *   .getWinningBid(auctionId)\n   *   .then((bid) => console.log(bid))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  async getWinningBid(auctionId) {\n    await this.validateAuction(BigNumber.from(auctionId));\n    const bid = await this.contractWrapper.readContract.getWinningBid(auctionId);\n    if (bid._bidder === constants.AddressZero) {\n      return undefined;\n    }\n    return await this.mapBid(auctionId.toString(), bid._bidder, bid._currency, bid._bidAmount.toString());\n  }\n\n  /**\n   * Check if a bid-amount is/will be a winning bid.\n   *\n   * @param auctionId - Auction Id\n   * @param bidAmount - Amount to bid\n   * @returns the Auction object\n   */\n  async isWinningBid(auctionId, bidAmount) {\n    return await this.contractWrapper.readContract.isNewWinningBid(auctionId, bidAmount);\n  }\n\n  /**\n   * Get Auction Winner\n   *\n   * @remarks Get the winner of the auction after an auction ends.\n   *\n   * @example\n   * ```javascript\n   * // The auction ID of the auction that closed\n   * const auctionId = 0;\n   *\n   * contract.englishAuctions.\n   *   .getWinner(auctionId)\n   *   .then((auctionWinner) => console.log(auctionWinner))\n   *   .catch((err) => console.error(err));\n   * ```\n   */\n  async getWinner(auctionId) {\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    const bid = await this.contractWrapper.readContract.getWinningBid(auctionId);\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    const endTime = BigNumber.from(auction.endTimeInSeconds);\n\n    // if we have a winner in the map and the current time is past the endtime of the auction return the address of the winner\n    if (now.gt(endTime) && bid._bidder !== constants.AddressZero) {\n      return bid._bidder;\n    }\n    // otherwise fall back to query filter things\n\n    // TODO this should be via indexer or direct contract call\n    const closedAuctions = await this.contractWrapper.readContract.queryFilter(this.contractWrapper.readContract.filters.AuctionClosed());\n    const closed = closedAuctions.find(a => a.args.auctionId.eq(BigNumber.from(auctionId)));\n    if (!closed) {\n      throw new Error(`Could not find auction with ID ${auctionId} in closed auctions`);\n    }\n    return closed.args.winningBidder;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Auction\n   *\n   * @remarks Create a new auction where people can bid on an asset.\n   *\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract of the asset you want to auction\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to auction\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to auction\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the auctioned tokens\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // the minimum bid that will be accepted for the token\n   *   minimumBidAmount: \"1.5\",\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutBidAmount: \"10\",\n   *   // If a bid is made less than these many seconds before expiration, the expiration time is increased by this.\n   *   timeBufferInSeconds: \"900\", // 15 minutes by default\n   *   // A bid must be at least this much bps greater than the current winning bid\n   *   bidBufferBps: \"500\", // 5% by default\n   *   // when should the auction open up for bidding\n   *   startTimestamp: new Date(Date.now()),\n   *   // end time of auction\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   * }\n   *\n   * const tx = await contract.englishAuctions.createAuction(auction);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created auction\n   * ```\n   */\n  async createAuction(auction) {\n    const parsedAuction = EnglishAuctionInputParamsSchema.parse(auction);\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), parsedAuction.assetContractAddress, parsedAuction.tokenId, await this.contractWrapper.getSignerAddress());\n    const normalizedBuyoutAmount = await normalizePriceValue(this.contractWrapper.getProvider(), parsedAuction.buyoutBidAmount, parsedAuction.currencyContractAddress);\n    const normalizedMinBidAmount = await normalizePriceValue(this.contractWrapper.getProvider(), parsedAuction.minimumBidAmount, parsedAuction.currencyContractAddress);\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    if (parsedAuction.startTimestamp.lt(blockTime)) {\n      parsedAuction.startTimestamp = BigNumber.from(blockTime);\n    }\n    const receipt = await this.contractWrapper.sendTransaction(\"createAuction\", [{\n      assetContract: parsedAuction.assetContractAddress,\n      tokenId: parsedAuction.tokenId,\n      quantity: parsedAuction.quantity,\n      currency: cleanCurrencyAddress(parsedAuction.currencyContractAddress),\n      minimumBidAmount: normalizedMinBidAmount,\n      buyoutBidAmount: normalizedBuyoutAmount,\n      timeBufferInSeconds: parsedAuction.timeBufferInSeconds,\n      bidBufferBps: parsedAuction.bidBufferBps,\n      startTimestamp: parsedAuction.startTimestamp,\n      endTimestamp: parsedAuction.endTimestamp\n    }], {\n      // Higher gas limit for create auction\n      gasLimit: 500000\n    });\n    const event = this.contractWrapper.parseLogs(\"NewAuction\", receipt?.logs);\n    return {\n      id: event[0].args.auctionId,\n      receipt\n    };\n  }\n\n  /**\n   * Buyout Auction\n   *\n   * @remarks Buy a specific auction from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The auction ID of the asset you want to buy\n   * const auctionId = 0;\n   *\n   * await contract.englishAuctions.buyoutAuction(auctionId);\n   * ```\n   */\n  async buyoutAuction(auctionId) {\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    const currencyMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), auction.currencyContractAddress);\n    return this.makeBid(auctionId, ethers.utils.formatUnits(auction.buyoutBidAmount, currencyMetadata.decimals));\n  }\n\n  /**\n   * Bid On Auction\n   *\n   * @remarks Make a bid on an auction\n   *\n   * @example\n   * ```javascript\n   * // The auction ID of the asset you want to bid on\n   * const auctionId = 0;\n   * // The total amount you are willing to bid for auctioned tokens\n   * const bidAmount = 1;\n   *\n   * await contract.englishAuctions.makeBid(auctionId, bidAmount);\n   * ```\n   */\n  async makeBid(auctionId, bidAmount) {\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    const normalizedBidAmount = await normalizePriceValue(this.contractWrapper.getProvider(), bidAmount, auction.currencyContractAddress);\n    if (normalizedBidAmount.eq(BigNumber.from(0))) {\n      throw new Error(\"Cannot make a bid with 0 value\");\n    }\n    if (BigNumber.from(auction.buyoutBidAmount).gt(0) && normalizedBidAmount.gt(auction.buyoutBidAmount)) {\n      throw new Error(\"Bid amount must be less than or equal to buyoutBidAmount\");\n    }\n    const winningBid = await this.getWinningBid(auctionId);\n    if (winningBid) {\n      const isWinnner = await this.isWinningBid(auctionId, normalizedBidAmount);\n      invariant(isWinnner, \"Bid price is too low based on the current winning bid and the bid buffer\");\n    } else {\n      const tokenPrice = normalizedBidAmount;\n      const minimumBidAmount = BigNumber.from(auction.minimumBidAmount);\n      invariant(tokenPrice.gte(minimumBidAmount), \"Bid price is too low based on minimum bid amount\");\n    }\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(this.contractWrapper, normalizedBidAmount, auction.currencyContractAddress, overrides);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"bidInAuction\", [auctionId, normalizedBidAmount], overrides)\n    };\n  }\n\n  /**\n   * Cancel Auction\n   *\n   * @remarks Cancel an auction on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction you want to cancel\n   * const auctionId = \"0\";\n   *\n   * await contract.englishAuctions.cancelAuction(auctionId);\n   * ```\n   */\n  async cancelAuction(auctionId) {\n    const winningBid = await this.getWinningBid(auctionId);\n    if (winningBid) {\n      throw new Error(`Bids already made.`);\n    }\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"cancelAuction\", [auctionId])\n    };\n  }\n\n  /**\n   * Close the Auction for the buyer\n   *\n   * @remarks Closes the Auction and executes the sale for the buyer.\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction you want to close\n   * const auction = \"0\";\n   * await contract.englishAuctions.closeAuctionForBidder(auctionId);\n   * ```\n   *\n   * @param auctionId - the auction id to close\n   * @param closeFor - optionally pass the winning bid offeror address to close the auction on their behalf\n   */\n  async closeAuctionForBidder(auctionId, closeFor) {\n    if (!closeFor) {\n      closeFor = await this.contractWrapper.getSignerAddress();\n    }\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    try {\n      return {\n        receipt: await this.contractWrapper.sendTransaction(\"collectAuctionTokens\", [BigNumber.from(auctionId)])\n      };\n    } catch (err) {\n      if (err.message.includes(\"Marketplace: auction still active.\")) {\n        throw new AuctionHasNotEndedError(auctionId.toString(), auction.endTimeInSeconds.toString());\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * Close the Auction for the seller, i.e. the auction creator\n   *\n   * @remarks Closes the Auction and executes the sale for the seller.\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction you want to close\n   * const auctionId = \"0\";\n   * await contract.englishAuctions.closeAuctionForSeller(auctionId);\n   * ```\n   *\n   * @param auctionId - the auction id to close\n   */\n  async closeAuctionForSeller(auctionId) {\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    try {\n      return {\n        receipt: await this.contractWrapper.sendTransaction(\"collectAuctionPayout\", [BigNumber.from(auctionId)])\n      };\n    } catch (err) {\n      if (err.message.includes(\"Marketplace: auction still active.\")) {\n        throw new AuctionHasNotEndedError(auctionId.toString(), auction.endTimeInSeconds.toString());\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * Execute the Auction Sale\n   *\n   * @remarks Closes the Auction and executes the sale for both parties.\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction you want to close\n   * const auction = \"0\";\n   * await contract.englishAuctions.executeSale(auctionId);\n   * ```\n   *\n   * @param auctionId - the auction to close\n   */\n  async executeSale(auctionId) {\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    try {\n      const winningBid = await this.getWinningBid(auctionId);\n      invariant(winningBid, \"No winning bid found\");\n      const closeForSeller = this.encoder.encode(\"collectAuctionPayout\", [auctionId]);\n      const closeForBuyer = this.encoder.encode(\"collectAuctionTokens\", [auctionId]);\n      return await this.contractWrapper.multiCall([closeForSeller, closeForBuyer]);\n    } catch (err) {\n      if (err.message.includes(\"Marketplace: auction still active.\")) {\n        throw new AuctionHasNotEndedError(auctionId.toString(), auction.endTimeInSeconds.toString());\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * Get the buffer in basis points between bids for an auction.\n   *\n   * @param auctionId - id of the auction\n   */\n  async getBidBufferBps(auctionId) {\n    return (await this.getAuction(auctionId)).bidBufferBps;\n  }\n\n  /**\n   * returns the minimum bid a user can place to outbid the previous highest bid\n   * @param auctionId - id of the auction\n   */\n  async getMinimumNextBid(auctionId) {\n    // we can fetch all of these at the same time using promise.all\n    const [currentBidBufferBps, winningBid, auction] = await Promise.all([this.getBidBufferBps(auctionId), this.getWinningBid(auctionId), await this.validateAuction(BigNumber.from(auctionId))]);\n    const currentBidOrReservePrice = winningBid ?\n    // if there is a winning bid use the value of it\n    BigNumber.from(winningBid.bidAmount) :\n    // if there is no winning bid use the reserve price\n    BigNumber.from(auction.minimumBidAmount);\n    const minimumNextBid = currentBidOrReservePrice.add(\n    // the addition of the current bid and the buffer\n    // (have to divide by 10000 to get the fraction of the buffer (since it's in basis points))\n    currentBidOrReservePrice.mul(currentBidBufferBps).div(10000));\n\n    // it's more useful to return a currency value here\n    return fetchCurrencyValue(this.contractWrapper.getProvider(), auction.currencyContractAddress, minimumNextBid);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if auction could not be found\n   *\n   * @param auctionId - Auction to check for\n   */\n  async validateAuction(auctionId) {\n    try {\n      return await this.getAuction(auctionId);\n    } catch (err) {\n      console.error(`Error getting the auction with id ${auctionId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction to the auction interface.\n   *\n   * @internal\n   * @param auction - The auction to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapAuction(auction) {\n    let status = Status.UNSET;\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    switch (auction.status) {\n      case 1:\n        status = BigNumber.from(auction.startTimestamp).gt(blockTime) ? Status.Created : BigNumber.from(auction.endTimestamp).lt(blockTime) ? Status.Expired : Status.Active;\n        break;\n      case 2:\n        status = Status.Completed;\n        break;\n      case 3:\n        status = Status.Cancelled;\n        break;\n    }\n    return {\n      id: auction.auctionId.toString(),\n      creatorAddress: auction.auctionCreator,\n      assetContractAddress: auction.assetContract,\n      tokenId: auction.tokenId.toString(),\n      quantity: auction.quantity.toString(),\n      currencyContractAddress: auction.currency,\n      minimumBidAmount: auction.minimumBidAmount.toString(),\n      minimumBidCurrencyValue: await fetchCurrencyValue(this.contractWrapper.getProvider(), auction.currency, auction.minimumBidAmount),\n      buyoutBidAmount: auction.buyoutBidAmount.toString(),\n      buyoutCurrencyValue: await fetchCurrencyValue(this.contractWrapper.getProvider(), auction.currency, auction.buyoutBidAmount),\n      timeBufferInSeconds: BigNumber.from(auction.timeBufferInSeconds).toNumber(),\n      bidBufferBps: BigNumber.from(auction.bidBufferBps).toNumber(),\n      startTimeInSeconds: BigNumber.from(auction.startTimestamp).toNumber(),\n      endTimeInSeconds: BigNumber.from(auction.endTimestamp).toNumber(),\n      asset: await fetchTokenMetadataForContract(auction.assetContract, this.contractWrapper.getProvider(), auction.tokenId, this.storage),\n      status: status\n    };\n  }\n\n  /**\n   * Maps an auction-bid to the strict interface\n   *\n   * @internal\n   * @param bid\n   * @returns - A `Bid` object\n   */\n  async mapBid(auctionId, bidderAddress, currencyContractAddress, bidAmount) {\n    return {\n      auctionId,\n      bidderAddress,\n      currencyContractAddress,\n      bidAmount,\n      bidAmountCurrencyValue: await fetchCurrencyValue(this.contractWrapper.getProvider(), currencyContractAddress, bidAmount)\n    };\n  }\n  applyFilter(auctions, filter) {\n    let rawAuctions = [...auctions];\n    if (filter) {\n      if (filter.seller) {\n        rawAuctions = rawAuctions.filter(seller => seller.auctionCreator.toString().toLowerCase() === filter?.seller?.toString().toLowerCase());\n      }\n      if (filter.tokenContract) {\n        rawAuctions = rawAuctions.filter(tokenContract => tokenContract.assetContract.toString().toLowerCase() === filter?.tokenContract?.toString().toLowerCase());\n      }\n      if (filter.tokenId !== undefined) {\n        rawAuctions = rawAuctions.filter(tokenContract => tokenContract.tokenId.toString() === filter?.tokenId?.toString());\n      }\n    }\n    return filter?.count && filter.count < rawAuctions.length ? rawAuctions.slice(0, filter.count) : rawAuctions;\n  }\n}\n\n/**\n * @internal\n */\nconst OfferInputParamsSchema = z.object({\n  /**\n   * The address of the asset being sought.\n   */\n  assetContractAddress: AddressSchema,\n  /**\n   * The ID of the token.\n   */\n  tokenId: BigNumberishSchema,\n  /**\n   * The quantity of tokens to buy.\n   *\n   * For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n   */\n  quantity: BigNumberishSchema.default(1),\n  /**\n   * The address of the currency offered for the NFTs.\n   */\n  currencyContractAddress: AddressSchema.default(NATIVE_TOKEN_ADDRESS),\n  /**\n   * The total offer amount for the NFTs.\n   */\n  totalPrice: AmountSchema,\n  /**\n   * The end time of the offer.\n   */\n  endTimestamp: EndDateSchema\n});\n\n/**\n * @public\n */\n\n/**\n * Handles marketplace offers\n * @public\n */\nclass MarketplaceV3Offers {\n  // utilities\n\n  constructor(contractWrapper, storage) {\n    _defineProperty(this, \"featureName\", FEATURE_OFFERS.name);\n    _defineProperty(this, \"contractWrapper\", void 0);\n    _defineProperty(this, \"storage\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.events = new ContractEvents(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total number of offers\n   * @returns Returns the total number of offers created.\n   * @public\n   *\n   * @example\n   * ```javascript\n   * const totalOffers = await contract.offers.getTotalCount();\n   * ```\n   */\n  async getTotalCount() {\n    return await this.contractWrapper.readContract.totalOffers();\n  }\n\n  /**\n   * Get all offers.\n   *\n   * @example\n   * ```javascript\n   * const offers = await contract.offers.getAll();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Offer object array\n   */\n  async getAll(filter) {\n    const totalOffers = await this.getTotalCount();\n    let start = BigNumber.from(filter?.start || 0).toNumber();\n    let end = totalOffers.toNumber();\n    if (end === 0) {\n      throw new Error(`No offers exist on the contract.`);\n    }\n    let rawOffers = [];\n    let batches = await getAllInBatches(start, end, this.contractWrapper.readContract.getAllOffers);\n    rawOffers = batches.flat();\n    const filteredOffers = this.applyFilter(rawOffers, filter);\n    return await Promise.all(filteredOffers.map(offer => this.mapOffer(offer)));\n  }\n\n  /**\n   * Get all valid offers.\n   *\n   * @example\n   * ```javascript\n   * const offers = await contract.offers.getAllValid();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns the Offer object array\n   */\n  async getAllValid(filter) {\n    const totalOffers = await this.getTotalCount();\n    let start = BigNumber.from(filter?.start || 0).toNumber();\n    let end = totalOffers.toNumber();\n    if (end === 0) {\n      throw new Error(`No offers exist on the contract.`);\n    }\n    let rawOffers = [];\n    let batches = await getAllInBatches(start, end, this.contractWrapper.readContract.getAllValidOffers);\n    rawOffers = batches.flat();\n    const filteredOffers = this.applyFilter(rawOffers, filter);\n    return await Promise.all(filteredOffers.map(offer => this.mapOffer(offer)));\n  }\n\n  /**\n   * Get a offer by id\n   *\n   * @example\n   * ```javascript\n   * const offerId = 0;\n   * const offer = await contract.offers.getOffer(offerId);\n   * ```\n   *\n   * @param offerId - the listing id\n   * @returns the Direct listing object\n   */\n  async getOffer(offerId) {\n    const offer = await this.contractWrapper.readContract.getOffer(offerId);\n    return await this.mapOffer(offer);\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Make Offer\n   *\n   * @remarks Make an offer on the marketplace for an asset.\n   *\n   * @example\n   * ```javascript\n   * // Data of the offer you want to make\n   * const offer = {\n   *   // address of the contract the asset you want to make an offer for\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to buy\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to buy\n   *   quantity: 1,\n   *   // address of the currency contract that you offer to pay in\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // Total price you offer to pay for the mentioned token(s)\n   *   totalPrice: \"1.5\",\n   *   // Offer valid until\n   *   endTimestamp: new Date(),\n   * }\n   *\n   * const tx = await contract.offers.makeOffer(offer);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created offer\n   * ```\n   */\n  async makeOffer(offer) {\n    const parsedOffer = OfferInputParamsSchema.parse(offer);\n    const chainId = await this.contractWrapper.getChainID();\n    const currency = isNativeToken(parsedOffer.currencyContractAddress) ? NATIVE_TOKENS[chainId].wrapped.address : parsedOffer.currencyContractAddress;\n    const normalizedTotalPrice = await normalizePriceValue(this.contractWrapper.getProvider(), parsedOffer.totalPrice, currency);\n    const overrides = await this.contractWrapper.getCallOverrides();\n    await setErc20Allowance(this.contractWrapper, normalizedTotalPrice, currency, overrides);\n    const receipt = await this.contractWrapper.sendTransaction(\"makeOffer\", [{\n      assetContract: parsedOffer.assetContractAddress,\n      tokenId: parsedOffer.tokenId,\n      quantity: parsedOffer.quantity,\n      currency: currency,\n      totalPrice: normalizedTotalPrice,\n      expirationTimestamp: parsedOffer.endTimestamp\n    }], {\n      // Higher gas limit for create listing\n      gasLimit: 500000\n    });\n    const event = this.contractWrapper.parseLogs(\"NewOffer\", receipt?.logs);\n    return {\n      id: event[0].args.offerId,\n      receipt\n    };\n  }\n\n  /**\n   * Cancel Offer\n   *\n   * @remarks Cancel an offer on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The ID of the offer you want to cancel\n   * const offerId = \"0\";\n   *\n   * await contract.offers.cancelOffer(offerId);\n   * ```\n   */\n  async cancelOffer(offerId) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"cancelOffer\", [offerId])\n    };\n  }\n\n  /**\n   * Accept an offer\n   *\n   * @example\n   * ```javascript\n   * // The ID of the offer you want to accept\n   * const offerId = 0;\n   *\n   * await contract.offers.acceptOffer(offerId);\n   * ```\n   *\n   * @param offerId - The offer id\n   */\n  async acceptOffer(offerId) {\n    const offer = await this.validateOffer(BigNumber.from(offerId));\n    const {\n      valid,\n      error\n    } = await this.isStillValidOffer(offer);\n    if (!valid) {\n      throw new Error(`Offer ${offerId} is no longer valid. ${error}`);\n    }\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), offer.assetContractAddress, offer.tokenId, await this.contractWrapper.getSignerAddress());\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"acceptOffer\", [offerId], overrides)\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if offer could not be found\n   *\n   * @param offerId - offer to check for\n   */\n  async validateOffer(offerId) {\n    try {\n      return await this.getOffer(offerId);\n    } catch (err) {\n      console.error(`Error getting the offer with id ${offerId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the offer to the offer interface.\n   *\n   * @internal\n   * @param offer - The offer to map, as returned from the contract.\n   * @returns - The mapped interface.\n   */\n  async mapOffer(offer) {\n    let status = Status.UNSET;\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    switch (offer.status) {\n      case 1:\n        status = BigNumber.from(offer.expirationTimestamp).lt(blockTime) ? Status.Expired : Status.Active;\n        break;\n      case 2:\n        status = Status.Completed;\n        break;\n      case 3:\n        status = Status.Cancelled;\n        break;\n    }\n    return {\n      id: offer.offerId.toString(),\n      offerorAddress: offer.offeror,\n      assetContractAddress: offer.assetContract,\n      currencyContractAddress: offer.currency,\n      tokenId: offer.tokenId.toString(),\n      quantity: offer.quantity.toString(),\n      totalPrice: offer.totalPrice.toString(),\n      currencyValue: await fetchCurrencyValue(this.contractWrapper.getProvider(), offer.currency, offer.totalPrice),\n      asset: await fetchTokenMetadataForContract(offer.assetContract, this.contractWrapper.getProvider(), offer.tokenId, this.storage),\n      endTimeInSeconds: BigNumber.from(offer.expirationTimestamp).toNumber(),\n      status: status\n    };\n  }\n\n  /**\n   * Use this method to check if an offer is still valid.\n   *\n   * Ways an offer can become invalid:\n   * 1. The offer has expired\n   * 2. The offeror doesn't have enough balance of currency tokens\n   * 3. The offeror removed the approval of currency tokens on the marketplace\n   *\n   * @internal\n   * @param offer - The offer to check.\n   * @returns - True if the offer is valid, false otherwise.\n   */\n  async isStillValidOffer(offer) {\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    if (now.gt(offer.endTimeInSeconds)) {\n      return {\n        valid: false,\n        error: `Offer with ID ${offer.id} has expired`\n      };\n    }\n    const chainId = await this.contractWrapper.getChainID();\n    const currency = isNativeToken(offer.currencyContractAddress) ? NATIVE_TOKENS[chainId].wrapped.address : offer.currencyContractAddress;\n    const provider = this.contractWrapper.getProvider();\n    const erc20 = new ContractWrapper(provider, currency, ERC20Abi, {});\n    const offerorBalance = await erc20.readContract.balanceOf(offer.offerorAddress);\n    if (offerorBalance.lt(offer.totalPrice)) {\n      return {\n        valid: false,\n        error: `Offeror ${offer.offerorAddress} doesn't have enough balance of token ${currency}`\n      };\n    }\n    const offerorAllowance = await erc20.readContract.allowance(offer.offerorAddress, this.getAddress());\n    if (offerorAllowance.lt(offer.totalPrice)) {\n      return {\n        valid: false,\n        error: `Offeror ${offer.offerorAddress} hasn't approved enough amount of token ${currency}`\n      };\n    }\n    return {\n      valid: true,\n      error: \"\"\n    };\n  }\n  applyFilter(offers, filter) {\n    let rawOffers = [...offers];\n    if (filter) {\n      if (filter.offeror) {\n        rawOffers = rawOffers.filter(offeror => offeror.offeror.toString().toLowerCase() === filter?.offeror?.toString().toLowerCase());\n      }\n      if (filter.tokenContract) {\n        rawOffers = rawOffers.filter(tokenContract => tokenContract.assetContract.toString().toLowerCase() === filter?.tokenContract?.toString().toLowerCase());\n      }\n      if (filter.tokenId !== undefined) {\n        rawOffers = rawOffers.filter(tokenContract => tokenContract.tokenId.toString() === filter?.tokenId?.toString());\n      }\n    }\n    return filter?.count && filter.count < rawOffers.length ? rawOffers.slice(0, filter.count) : rawOffers;\n  }\n}\n\n/**\n * Create your own whitelabel marketplace that enables users to buy and sell any digital assets.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"marketplace\");\n * ```\n *\n * @public\n */\nclass MarketplaceV3 {\n  /**\n   * @internal\n   */\n\n  /**\n   * Direct listings\n   * @remarks Create and manage direct listings in your marketplace.\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // The price to pay per unit of NFTs listed.\n   *   pricePerToken: 1.5,\n   *   // when should the listing open up for offers\n   *   startTimestamp: new Date(Date.now()),\n   *   // how long the listing will be open for\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   *   // Whether the listing is reserved for a specific set of buyers.\n   *   isReservedListing: false\n   * }\n   *\n   * const tx = await contract.directListings.createListing(listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   *\n   * // And on the buyers side:\n   * // The ID of the listing you want to buy from\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await contract.directListings.buyFromListing(listingId, quantityDesired);\n   * ```\n   */\n  get directListings() {\n    return assertEnabled(this.detectDirectListings(), FEATURE_DIRECT_LISTINGS);\n  }\n  /**\n   * Auctions\n   * @remarks Create and manage auctions in your marketplace.\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract of the asset you want to auction\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to auction\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to auction\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the auctioned tokens\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // the minimum bid that will be accepted for the token\n   *   minimumBidAmount: \"1.5\",\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutBidAmount: \"10\",\n   *   // If a bid is made less than these many seconds before expiration, the expiration time is increased by this.\n   *   timeBufferInSeconds: \"1000\",\n   *   // A bid must be at least this much bps greater than the current winning bid\n   *   bidBufferBps: \"100\", // 100 bps stands for 1%\n   *   // when should the auction open up for bidding\n   *   startTimestamp: new Date(Date.now()),\n   *   // end time of auction\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   * }\n   *\n   * const tx = await contract.englishAuctions.createAuction(auction);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created auction\n   *\n   * // And on the buyers side:\n   * // The auction ID of the asset you want to bid on\n   * const auctionId = 0;\n   * // The total amount you are willing to bid for auctioned tokens\n   * const bidAmount = 1;\n   *\n   * await contract.englishAuctions.makeBid(auctionId, bidAmount);\n   * ```\n   */\n  get englishAuctions() {\n    return assertEnabled(this.detectEnglishAuctions(), FEATURE_ENGLISH_AUCTIONS);\n  }\n\n  /**\n   * Offers\n   * @remarks Make and manage offers.\n   * @example\n   * ```javascript\n   * // Data of the offer you want to make\n   * const offer = {\n   *   // address of the contract the asset you want to make an offer for\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to buy\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to buy\n   *   quantity: 1,\n   *   // address of the currency contract that you offer to pay in\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // Total price you offer to pay for the mentioned token(s)\n   *   totalPrice: \"1.5\",\n   *   // Offer valid until\n   *   endTimestamp: new Date(),\n   * }\n   *\n   * const tx = await contract.offers.makeOffer(offer);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created offer\n   *\n   * // And on the seller's side:\n   * // The ID of the offer you want to accept\n   * const offerId = 0;\n   * await contract.offers.acceptOffer(offerId);\n   * ```\n   */\n  get offers() {\n    return assertEnabled(this.detectOffers(), FEATURE_OFFERS);\n  }\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"contractWrapper\", void 0);\n    _defineProperty(this, \"storage\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"platformFees\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"_chainId\", void 0);\n    this._chainId = chainId;\n    this.abi = abi;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(this.contractWrapper, MarketplaceContractSchema, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, MarketplaceV3.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n\n  /** ********************\n   * FEATURE DETECTION\n   * ********************/\n\n  detectDirectListings() {\n    if (detectContractFeature(this.contractWrapper, \"DirectListings\")) {\n      return new MarketplaceV3DirectListings(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectEnglishAuctions() {\n    if (detectContractFeature(this.contractWrapper, \"EnglishAuctions\")) {\n      return new MarketplaceV3EnglishAuctions(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n  detectOffers() {\n    if (detectContractFeature(this.contractWrapper, \"Offers\")) {\n      return new MarketplaceV3Offers(this.contractWrapper, this.storage);\n    }\n    return undefined;\n  }\n}\n_defineProperty(MarketplaceV3, \"contractRoles\", [\"admin\", \"lister\", \"asset\"]);\n\nexport { MarketplaceV3 };\n"],
  "mappings": "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",
  "names": []
}
